exit
(count [1 2 3])
(count '(1 2 3))
(defn binary-tree [tree] (
)
(defn binary-tree [tree] (if (and (= (3 count tree)) (binary-tree (first tree)) (binary-tree (second tree))) true false))
(binary-tree '(:a (:b nil nil) nil))
(doc sequential?)
(defn binary-tree [tree] (if (and (= (3 count tree)) (binary-tree (second tree)) (binary-tree (last tree))) true false))
(binary-tree '(:a (:b nil nil) nil))
(secon '(:a (:b nil nil) nil))
(second '(:a (:b nil nil) nil))
(last '(:a (:b nil nil) nil))
(doc coll?)
(defn binary-tree [tree] (if (and (= (3 count tree)) (binary-tree (second tree)) (binary-tree (last tree))) true false))
(binary-tree '(:a (:b nil nil) nil))
(defn binary-tree [tree] (if (and (= 3 (count tree)) (binary-tree (second tree)) (binary-tree (last tree))) true false))
(binary-tree '(:a (:b nil nil) nil))
(binary-tree nil)
(defn binary-tree [tree] (and (= 3 (count tree)) (binary-tree (second tree)) (binary-tree (last tree))))
(binary-tree '(:a (:b nil nil) nil))
(defn binary-tree [tree] (or nil? tree (and (= 3 (count tree)) (binary-tree (second tree)) (binary-tree (last tree)))))
(binary-tree '(:a (:b nil nil) nil))
(defn binary-tree [tree] (or (nil? tree) (and (= 3 (count tree)) (binary-tree (second tree)) (binary-tree (last tree)))))
(binary-tree '(:a (:b nil nil) nil))
(count nil)
(defn binary-tree [tree] (or (nil? tree) (and (coll? tree) (= 3 (count tree)) (binary-tree (second tree)) (binary-tree (last tree)))))
(binary-tree '(:a (:b nil nil) nil))
(binary-tree [1 [2 [3 [4 false nil] nil] nil] nil])
(= (:b nil nil) (:b nil nil))
(= (:b nil nil) (:c nil nil))
[1 [2 nil [3 [4 [5 nil nil] [6 nil nil]] nil]]
[2 [3 nil [4 [6 nil nil] [5 nil nil]]] nil]]
clear
exit
(nth [1 2 3] 1)
(def swap-args [fnc a b] (fn (fnc b a)))
(defn swap-args [fnc a b] (fn (fnc b a)))
(defn swap-args [fnc a b] ((fn (fnc b a))))
(defn swap-args [fnc a b] ((fnc b a)))
(swap-args nth 2 [1 2 3 4])
(defn swap-args [fnc] (fn [arg1 arg2] (f arg2 arg1)))
(defn swap-args [fnc] (fn [arg1 arg2] (fnc arg2 arg1)))
((swap-args nth) 2 [1 2 3])
((swap-args nth) 2 [1 1 6])
(mod (count [1 2 3 4 5]) 2)
(mod 7 2)
(drop 1 [1 2 3 4 5])
(defn rotate [d s] (let [n (mod n (count s))] (concat (drop n s) (take n s))))
(defn rotate [d s] (let [n (mod d (count s))] (concat (drop n s) (take n s))))
(rotate 2 [1 2 3 4 5])
(rotate -2 [1 2 3 4 5])
exit
(partition 2 [1 2 3 4 5 6])
(doc list)
(list (partition 2 [1 2 3 4 5 6]))
(apply list (partition 2 [1 2 3 4 5 6]))
(map apply list (partition 2 [1 2 3 4 5 6]))
(apply map list (partition 2 [1 2 3 4 5 6]))
(doc map)
(doc group-by)
(group-by class [1 :a 2 :b 3 :c])
(group-by even? [1 :a 2 :b 3 :c])
(group-by even? [1 2  3])
(group-by even? [1 :a 2 :b 3 :c])
(group-by class [1 :a 2 :b 3 :c])
(values (group-by class [1 :a 2 :b 3 :c]))
(value (group-by class [1 :a 2 :b 3 :c]))
(doc value)
(doc values)
(doc keys)
(doc vals)
(vals (group-by class [1 :a 2 :b 3 :c]))
exit
(contains? #{1 2 4 5} 2)
(contains? #{1 2 4 5} 8)
(empty? "")
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def kay {:name "Guy Gavriel Kay" :birth-year 1954})
(def dick {:name "Philip K. Dick", :birth-year 1928, :death-year 1982})
(def zelazny {:name "Roger Zelazny", :birth-year 1937, :death-year 1995})
(def authors #{china, octavia, kay, dick, zelazny})
(def cities {:title "The City and the City" :authors #{china}
             :awards #{:locus, :world-fantasy, :hugo}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def lord-of-light {:title "Lord of Light", :authors #{zelazny}
                    :awards #{:hugo}})
(def deus-irae {:title "Deus Irae", :authors #{dick, zelazny}})
(def ysabel {:title "Ysabel", :authors #{kay}, :awards #{:world-fantasy}})
(def scanner-darkly {:title "A Scanner Darkly" :authors #{dick}})
(def books #{cities, wild-seed, lord-of-light,
             deus-irae, ysabel, scanner-darkly}])
(def books #{cities, wild-seed, lord-of-light,
             deus-irae, ysabel, scanner-darkly}])
(def books #{cities, wild-seed, lord-of-light,
             deus-irae, ysabel, scanner-darkly})
(books)
(:awards books)
(:award books)
(apply :award books)
(apply :awards books)
books
(map :awards books)
(:awards ysabel)
(contains? (:awards ysabel) :world-fantasy})
(contains? (:awards ysabel) :world-fantasy)
cities
(contains? (:awards cities) #{:locus :world-fantasy :hugo})
(:awards cities)
(contains? (:awards cities) #{:locus :world-fantasy :hugo})
(type (:awards cities))
(every? contains? (:awards cities) #{:locus :world-fantasy :hugo})
(every? #(contains? #{:locus :world-fantasy #{:locus :world-fantasy :hugo})
(every? #(contains? #{:locus :world-fantasy :hugo}) (:awards cities))
(every? (fn [x] (contains? #{:locus :world-fantasy :hugo}) x) (:awards cities))
(every? (fn [x] (contains? #{:locus :world-fantasy :hugo} x) ) (:awards cities))
(every? (fn [x] (contains? #{:pulitzer :locus :world-fantasy :hugo} x) ) (:awards cities))
(every? (fn [x] (contains? #{:locus} x) ) (:awards cities))
(doc contains?)
(:awards cities)
(ns predicates)
(every? (fn [x] (has-award? cities x)) #{:locus :world-fantasy :hugo})
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def kay {:name "Guy Gavriel Kay" :birth-year 1954})
(def dick {:name "Philip K. Dick", :birth-year 1928, :death-year 1982})
(def zelazny {:name "Roger Zelazny", :birth-year 1937, :death-year 1995})
(def authors #{china, octavia, kay, dick, zelazny})
(def cities {:title "The City and the City" :authors #{china}
             :awards #{:locus, :world-fantasy, :hugo}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def lord-of-light {:title "Lord of Light", :authors #{zelazny}
                    :awards #{:hugo}})
(def deus-irae {:title "Deus Irae", :authors #{dick, zelazny}})
(def ysabel {:title "Ysabel", :authors #{kay}, :awards #{:world-fantasy}})
(def scanner-darkly {:title "A Scanner Darkly" :authors #{dick}})
(def books #{cities, wild-seed, lord-of-light,
             deus-irae, ysabel, scanner-darkly})
(every? (fn [x] (has-award? cities x)) #{:locus :world-fantasy :hugo})
(every? (fn [x] (has-award? cities x)) #{:locus :world-fantasy :hugo :pulitzer})
(true? 1)
